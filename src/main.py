import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
from matplotlib.widgets import Slider
import matplotlib.animation as animation
import argparse
import sys

from read_data import read_file, process_df
from plot_data import plot_data, set_all_maxes, update_data
from colorings import *


parser = argparse.ArgumentParser(description="Generate colored 3d lag plots of time-series data")
parser.add_argument("-i", dest="INPUT_FILE")
parser.add_argument("--coloring", dest="coloring")
parser.add_argument("--render", dest="out_file", required=False)
parser.add_argument("entries_prefix")
parser.add_argument('exits_prefix')
parser.add_argument('data_name')
render_flag = "--render" in sys.argv
args = parser.parse_args()

azimuth = -100
elevation = 10

fig = plt.figure()
fig.set_size_inches(17, 9)

lag_len_weeks = 1

gs = gridspec.GridSpec(2, 3, width_ratios=[1, 1, 0.1], height_ratios=[1, 0.05],
                       left=0.05)

df = read_file(args.INPUT_FILE)
m = max(find_max_val(df, args.entries_prefix), find_max_val(df, args.exits_prefix))
entries_lagged = process_df(df, args.entries_prefix, lag_len_weeks)
exits_lagged = process_df(df, args.exits_prefix, lag_len_weeks)
num_timesteps = len(entries_lagged)

mapping, colors, colorbar_label = get_coloring_info(str_to_coloring(args.coloring), df)

fig.suptitle("3D Lag Plot For " + args.data_name + "(Autogenerated) Lag=" + str(lag_len_weeks)+" weeks")
ax = plt.subplot(gs[0], projection='3d')
ax.view_init(elev=elevation, azim=azimuth)
plot = plot_data(ax, args.entries_prefix, args.entries_prefix, entries_lagged, colors)

ax2 = plt.subplot(gs[1], projection='3d')
ax2.view_init(elev=elevation, azim=azimuth)
plot2 = plot_data(ax2, args.exits_prefix, args.exits_prefix, exits_lagged, colors)

set_all_maxes(ax, m)
set_all_maxes(ax2, m)


cbaxes = plt.subplot(gs[2])
fig.colorbar(mapping, cax=cbaxes, label=colorbar_label)


slider_ax = plt.subplot(gs[1, :])
time_slider = Slider(slider_ax, "Time", 0, num_timesteps,
                     valinit=num_timesteps, valstep=1, valfmt="%0.0f weeks")
i = 0


def update_time(val):
    global i
    i = time_slider.val
    time = int(time_slider.val)
    update_data(ax, plot, time, args.entries_prefix, entries_lagged, colors)
    update_data(ax2, plot2, time, args.exits_prefix, exits_lagged, colors)
    set_all_maxes(ax, m)
    set_all_maxes(ax2, m)
    fig.canvas.draw_idle()


time_slider.on_changed(update_time)


def animate(k):
    global i
    i += 1
    i %= num_timesteps
    print('\r{0:.2f}%'.format(100 * i/num_timesteps), end='')
    time_slider.set_val(i)


plt.tight_layout()

if render_flag:
    print("Rendering....")
    ani = animation.FuncAnimation(fig, animate, np.arange(0, num_timesteps), interval=20, repeat=False)
    ani.save(args.out_file, writer="ffmpeg")
else:
    ani = animation.FuncAnimation(fig, animate, np.arange(0, num_timesteps), interval=20, repeat=True)
    plt.show()

