import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
from matplotlib.widgets import Slider
import matplotlib.animation as animation

import sys

from read_data import *
from plot_data import *
from colorings import *

f_name = sys.argv[1]

fig = plt.figure()
fig.set_size_inches(17, 9)

lag_len_weeks = 1

gs = gridspec.GridSpec(2, 3, width_ratios=[1, 1, 0.1], height_ratios=[1, 0.05],
        left=0.05)

df = read_file(f_name)
entries_prefix = "Entries_KIN"
exits_prefix = "Exits_KIN"
m = max(find_max_val(df, entries_prefix), find_max_val(df, exits_prefix))
entries_lagged = process_df(df, entries_prefix, lag_len_weeks)
exits_lagged = process_df(df, exits_prefix, lag_len_weeks)
num_timesteps = len(entries_lagged)

cmap, colors = get_colors(num_timesteps, "viridis", seasonal=False)

fig.suptitle("3D Lag Plot For Tennessee KIN (Autogenerated) Lag="+str(lag_len_weeks)+" weeks")
ax = plt.subplot(gs[0], projection='3d')
ax.view_init(elev=10, azim=-165)
plot = plot_data(ax, entries_prefix, "KIN Entries", entries_lagged, colors)

ax2 = plt.subplot(gs[1], projection='3d')
ax2.view_init(elev=10, azim=-165)
plot2 = plot_data(ax2, exits_prefix, "KIN Exits", exits_lagged, colors)

set_all_maxes(ax, m)
set_all_maxes(ax2, m)


cbaxes = plt.subplot(gs[2])
fig.colorbar(cmap, cax=cbaxes, label="Time in weeks")


slider_ax = plt.subplot(gs[1, :])
time_slider = Slider(slider_ax, "Time", 0, num_timesteps,
                     valinit=num_timesteps, valstep=1, valfmt="%0.0f weeks")


def update_time(val):
    time = int(time_slider.val)
    # print(time)
    # print(entries_lagged[:time])
    update_data(ax, plot, time, entries_prefix, entries_lagged, colors)
    update_data(ax2, plot2, time, exits_prefix, exits_lagged, colors)
    set_all_maxes(ax, m)
    set_all_maxes(ax2, m)
    fig.canvas.draw_idle()

time_slider.on_changed(update_time)


def animate(i):
    print('\r{0:.2f}%'.format(100 * i/num_timesteps), end='')
    time_slider.set_val(i)

# ani = animation.FuncAnimation(fig, animate, np.arange(0, num_timesteps), interval=20, repeat=True)
ani = animation.FuncAnimation(fig, animate, np.arange(0, num_timesteps), interval=20, repeat=False)
ani.save('KIN_animated.mp4', writer="ffmpeg")

# fig.savefig("test_TN_CC.png", dpi=300, transparent=True, bbox_inches='tight')
plt.tight_layout()
plt.show()
